name: CI/CD Secure Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:

jobs:
  test_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint & Unit Tests
        run: |
          npm run lint || echo "No lint configured"
          npm test

      - name: Audit JS dependencies (high+)
        run: npm audit --audit-level=high || true

  build_scan:
    runs-on: ubuntu-latest
    needs: test_lint
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t app-segura .

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: 'app-segura'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'

  # (Opcional) SAST con Semgrep
  semgrep:
    runs-on: ubuntu-latest
    needs: test_lint
    steps:
      - uses: actions/checkout@v4
      - uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/ci
          generateSarif: true
      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # (Opcional) Secret scanning con Gitleaks
  gitleaks:
    runs-on: ubuntu-latest
    needs: test_lint
    steps:
      - uses: actions/checkout@v4
      - name: gitleaks scan
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --no-banner --redact --verbose

  # Despliegue a entorno de pruebas por SSH
  deploy_test:
    runs-on: ubuntu-latest
    needs: build_scan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_HOST }}
          username: ${{ secrets.TEST_USER }}
          key: ${{ secrets.TEST_SSH_KEY }}
          script: |
            set -e
            cd /srv/app-segura || mkdir -p /srv/app-segura && cd /srv/app-segura
            if [ ! -d .git ]; then
              git init
              git remote add origin ${{ secrets.REPO_SSH_URL }}
              git fetch origin
            fi
            git checkout -B main
            git pull origin main
            docker compose down || true
            docker compose build --no-cache
            docker compose up -d
